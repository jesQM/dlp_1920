P: expression1 = expression2 (+|-|*|/) expression3
R: expression1.type = expression2.type.arithmetic(expression3.type, expression1)

P: expression1 = expression2 expression3
R: expression1.type = expression2.type.squareBrackets(expression3.type, expression1)

P: expression1 = expression2 (>|>=|<|<=|==|!=) expression3
R: expression1.type = expression2.type.comparison(expression3.type, expression1)

P: expression1 = expression2 (&& | ||) expression3
R: expression1.type = expression2.type.logic(expression3.type, expression1)

WhileStatement:
P: statement1 -> expression statement2*
R: if(!expression1.type.isBoolean())
        new ErrorType(expression1.getLine(), expression1.getColumn(), "The stop condition is not boolean");

IfStatement:
R: if(!expression1.type.isBoolean())
           new ErrorType(expression1.getLine(), expression1.getColumn(), "The condition is not boolean");

Assignment:
P: statement -> expression1 expression2
R: exp1.type.canBeAssigned(exp2.type, statement)

UnaryNegation:
P: expression1 -> expression2
R: exp1.type = exp2.type.not(exp1)
/*
    R: if(!expression2.type.isBoolean())
         new ErrorType(expression1.getLine(), expression1.getColumn(), "Cannot negate a non-boolean");
*/

UnaryMinus:
P: expression1 -> expression2
R: expression2.type.canBeMinus(expression2)


FunctionInvoke:
P: expression1 -> expression2 expression3*
R: expression1.variable.type.canBeInvoked(expression3, expression1)
/*
    Definition def = exp1.getVariable().definition
    if ( def != null)
        def.canBeInvoked(expression3)
*/

Return:
P: statement -> expression
R: statement.returnType.canBeAssigned(expression.type, statement) // returnType passed as parameter

FieldAccess:
P: exp1 -> exp2 ID
R: exp1.type = exp2.type.dot(ID, exp1)
